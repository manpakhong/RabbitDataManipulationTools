package hksarg.swd.cssa.csa.common;

import static hksarg.swd.csss.csa.common.CSA_Consts.SQL_RC_OK;
import static hksarg.swd.csss.csa.common.CSA_Consts.SQL_RET_OK;
import static org.junit.Assert.fail;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.dbunit.IDatabaseTester;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import hksarg.swd.csss.csa.common.CSA_MiscUtils;
import hksarg.swd.csss.csa.common.CSA_MiscUtils.CommitmentRec;
import hksarg.swd.csss.csa.flowtest.bundles.DbProperties;
import hksarg.swd.csss.csa.flowtest.factories.DbUtilsFactory;
import hksarg.swd.csss.csa.flowtest.factories.PropertiesFactory;
import hksarg.swd.csss.csa.flowtest.helpers.CaseTestHelper;
import hksarg.swd.csss.csa.flowtest.services.CssaDataStubMgr;
import hksarg.swd.csss.csa.flowtest.services.SnapshotMgr;
import hksarg.swd.csss.csa.flowtest.utils.CalendarUtils;
import hksarg.swd.csss.csa.flowtest.utils.DbUtils;
import hksarg.swd.csss.csa.flowtest.utils.SerializeUtils;
import hksarg.swd.csss.database.HibernateUtil;
import hksarg.swd.csss.security.UserInfo;
import hksarg.swd.csss.utils.ThreadLocalUtils;
import hksarg.swd.hdo.TmsComm;
import hksarg.swd.hdo.TuaUserInfo;
import hksarg.swd.hdo.TuaUserPost;


public class CSA_MiscUtilsTest {
	private final static Logger logger = LoggerFactory
			.getLogger(CSA_MiscUtilsTest.class);
	private static String className = CSA_MiscUtilsTest.class.getName();

	private static IDatabaseTester databaseTester;
	private static SnapshotMgr snapshotMgr;
	private static IDatabaseTester dbTester = null;
	private static Integer caseKey;
	private static List<Integer> custKeyList;
	private static String loginId;
	private static String procUnit;
	private static String post;
	private static String grtType;
	private static String handleNoti;
	private static Calendar assPerdStrCalendar;
	private static Calendar assPendEndCalendar;
	private static Calendar paymentExpireCalendar;
	private static Calendar calToday;
	private static int payDay;
	private static String urgChgBa;
	private static String opCode;
	private static Timestamp creTs;
	private static StringBuilder sValRet;
	private static CaseTestHelper helper;
	private static DbUtils dbUtils = null;
	private static DbProperties dbProperties = null;

	private void init() {
		try {
			helper = new CaseTestHelper();
			caseKey = 4504146;
			custKeyList = new ArrayList<Integer>();

			Integer custKey1 = 3683328;
			// Integer custKey2 = 3735422;
			// Integer custKey3 = 3735424;

			custKeyList.add(custKey1);
			// custKeyList.add(custKey2);
			// custKeyList.add(custKey3);

			loginId = "test1";
			post = "SSSA2_ABDFU";
			procUnit = "ABD";
			grtType = "CSA";
			handleNoti = "Y";

			assPerdStrCalendar = CalendarUtils.getMinHostCalendarToday();
			assPerdStrCalendar.set(Calendar.YEAR, 2015);
			assPerdStrCalendar.set(Calendar.MONTH, Calendar.FEBRUARY);
			assPerdStrCalendar.set(Calendar.DAY_OF_MONTH, 29);

			assPendEndCalendar = CalendarUtils.getMaxHostCalendarToday();
			assPendEndCalendar.set(Calendar.YEAR, 2016);
			assPendEndCalendar.set(Calendar.MONTH, Calendar.FEBRUARY);
			assPendEndCalendar.set(Calendar.DAY_OF_MONTH, 29);

			paymentExpireCalendar = CalendarUtils.getMaxHostCalendarToday();
			assPendEndCalendar.set(Calendar.YEAR, 2016);
			assPendEndCalendar.set(Calendar.MONTH, Calendar.FEBRUARY);
			assPendEndCalendar.set(Calendar.DAY_OF_MONTH, 29);

			calToday = Calendar.getInstance();
			payDay = 7;

			urgChgBa = "Y";
			opCode = "AU";
			creTs = new Timestamp(calToday.getTime().getTime());
			sValRet = new StringBuilder();

			dbUtils = DbUtilsFactory.getInstanceOfDb2DbUtils();
			dbProperties = PropertiesFactory.getInstanceOfDb2DbProperties();
			dbTester = dbUtils.getJdbcDatabaseTester();
			snapshotMgr = new SnapshotMgr();
			databaseTester = dbUtils.getJdbcDatabaseTester();
		} catch (Exception e) {
			logger.error(className + ".init() - ", e);
		}
	}

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
		init();
	}

	@After
	public void tearDown() throws Exception {
	}

	
	private void deleteTmsComm(Session sess) throws Exception{
		try{
			List <TmsComm> tmsCommList = sess.createCriteria(TmsComm.class)
					.add( Restrictions.eq("id.caseKey", caseKey ) )
					.list();
			
			if (tmsCommList != null){
				for (TmsComm tmsComm: tmsCommList){
					sess.delete(tmsComm);
				}
			}
		} catch (Exception e){
			logger.error(className + ".deleteTmsComm() - ", e);
		}
	}
	
	@Test
	public final void testSaveComms() {
		boolean isDone = false;
		Session sess = null;
		Transaction tran = null;
		//UserTransaction ut = DatabaseConnectionFactory.createUserTransaction();
		CssaDataStubMgr cssaDataStubMgr = new CssaDataStubMgr();
		TuaUserInfo tuaUserInfo = null;
		List<TuaUserPost> tuaUserPostList = null;
		Connection conn = null;
		try {
			UserInfo userInfo = cssaDataStubMgr.getUserInfo(loginId, procUnit);


			//SessionFactory sf = HibernateUtilStub.getSessionFactory();
			//sf.openSession();
			sess = HibernateUtil.getCurrentSession();
			tran = sess.getTransaction();
			tran.begin();

			deleteTmsComm(sess);
			tran.commit();
			
			List <TmsComm> tmsCommList = sess.createCriteria(TmsComm.class)
					.add( Restrictions.eq("id.caseKey", caseKey ) )
					.list();
			
			Assert.assertTrue(tmsCommList.size() == 0);
			
			sess = HibernateUtil.getCurrentSession();
			tran = sess.getTransaction();
			tran.begin();
			
			conn = dbUtils.getConnection();
			conn.setSchema(dbProperties.getSchema());
			// conn.setCatalog(dbProperties.getSchema());
			userInfo.setConnection(dbUtils.getConnection());
			ThreadLocalUtils.setUserInfo(userInfo);
			String fileName = "pComms_4418959";
			SerializeUtils<List<CommitmentRec>> serializeUtils = new SerializeUtils<List<CommitmentRec>>();
			List<CommitmentRec> pComms = serializeUtils.deserializeObject(fileName);
			int[] retArr = { SQL_RET_OK, SQL_RC_OK };
			StringBuilder sb = new StringBuilder();

			CSA_MiscUtils.saveComms(sess, pComms, retArr, caseKey.intValue(), new Date(), procUnit,
					userInfo.getLoginId(), userInfo.getLoggedInPost().getPostName(),
					new Timestamp(new Date().getTime()));
			
			tran.commit();

			conn.commit();

			List <TmsComm> tmsCommResultList = sess.createCriteria(TmsComm.class)
					.add( Restrictions.eq("id.caseKey", caseKey ) )
					.list();
			
			Assert.assertTrue(tmsCommResultList.size() == 2);
			boolean containComm = false;
			for (TmsComm tmsComm: tmsCommResultList){
				if (tmsComm.getCommCre07().equals(new BigDecimal(12130)) ){
					containComm = true;
				}
			}
			Assert.assertTrue(containComm);
			
			
		} catch (Exception e) {
			fail("Exception - " + e.getMessage());
		} finally {
			if (sess != null && sess.isOpen()) {
				sess.close();
				sess = null;
			}
			if (conn != null) {
				try {
					if (!conn.isClosed()) {
						conn.close();
						conn = null;
					}
				} catch (SQLException e) {
					fail("Exception - " + e.getMessage());
				}
			}
		}
	}

}
