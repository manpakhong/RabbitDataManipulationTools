package hksarg.swd.cssa.csa.common;

import java.sql.Connection;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.dbunit.IDatabaseTester;
import org.dbunit.dataset.IDataSet;
import org.dbunit.dataset.ITable;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import hksarg.swd.csss.csa.common.CSA_InsLafis;
import hksarg.swd.csss.csa.flowtest.bundles.DbProperties;
import hksarg.swd.csss.csa.flowtest.factories.DbUtilsFactory;
import hksarg.swd.csss.csa.flowtest.factories.PropertiesFactory;
import hksarg.swd.csss.csa.flowtest.helpers.CaseTestHelper;
import hksarg.swd.csss.csa.flowtest.models.dtos.CaptureScopeDto;
import hksarg.swd.csss.csa.flowtest.services.CssaDataStubMgr;
import hksarg.swd.csss.csa.flowtest.services.SnapshotMgr;
import hksarg.swd.csss.csa.flowtest.utils.CalendarUtils;
import hksarg.swd.csss.csa.flowtest.utils.DbUtils;
import hksarg.swd.csss.csa.flowtest.utils.HibernateUtilStub;
import hksarg.swd.csss.database.HibernateUtil;
import hksarg.swd.csss.security.UserInfo;
import hksarg.swd.csss.utils.ThreadLocalUtils;
import hksarg.swd.hdo.TuaUserInfo;
import hksarg.swd.hdo.TuaUserPost;
import junit.framework.TestCase;
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class Csa_InsLafis_4504146_Test extends TestCase {
	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	private String className = this.getClass().getName();
	private IDatabaseTester databaseTester;
	private SnapshotMgr snapshotMgr;
	private IDatabaseTester dbTester = null;
	private Integer caseKey;
	private List<Integer> custKeyList;
	private String loginId;
	private String procUnit;
	private String post;
	private String grtType;
	private String handleNoti;
	private Calendar assPerdStrCalendar;
	private Calendar assPendEndCalendar;
	private Calendar paymentExpireCalendar;
	private Calendar calToday;
	private int payDay;
	private String urgChgBa;
	private String opCode;
	private Timestamp creTs;
	private StringBuilder sValRet;
	private CaseTestHelper helper;
	private DbUtils dbUtils = null;
	private DbProperties dbProperties = null;
	public Csa_InsLafis_4504146_Test(){
		init();
	}
	
	private void init(){
		try{
			helper = new CaseTestHelper();
			caseKey = 4504146;
			custKeyList = new ArrayList<Integer>();
			
			Integer custKey1 = 540613;
//			Integer custKey2 = 3773920;
			
			custKeyList.add(custKey1);
//			custKeyList.add(custKey2);
			
			
			loginId = "test1";
			post = "SSSA2_ABDFU";
			procUnit = "ABD";
			grtType = "CSA";
			handleNoti = "Y";
			
			assPerdStrCalendar = CalendarUtils.getMinHostCalendarToday();
			assPerdStrCalendar.set(Calendar.YEAR, 2015);
			assPerdStrCalendar.set(Calendar.MONTH, Calendar.FEBRUARY);
			assPerdStrCalendar.set(Calendar.DAY_OF_MONTH, 29);

			
			assPendEndCalendar = CalendarUtils.getMaxHostCalendarToday();
			assPendEndCalendar.set(Calendar.YEAR, 2016);
			assPendEndCalendar.set(Calendar.MONTH, Calendar.FEBRUARY);
			assPendEndCalendar.set(Calendar.DAY_OF_MONTH, 29);
			
			paymentExpireCalendar = CalendarUtils.getMaxHostCalendarToday();
			assPendEndCalendar.set(Calendar.YEAR, 2016);
			assPendEndCalendar.set(Calendar.MONTH, Calendar.FEBRUARY);
			assPendEndCalendar.set(Calendar.DAY_OF_MONTH, 29);
			
			calToday = Calendar.getInstance();
			payDay = 7;
			
			urgChgBa = "Y";
			opCode = "AP";
			creTs = new Timestamp(calToday.getTime().getTime());
			sValRet = new StringBuilder();
			
			
			dbUtils = DbUtilsFactory.getInstanceOfDb2DbUtils();
			dbProperties = PropertiesFactory.getInstanceOfDb2DbProperties();
			dbTester = dbUtils.getJdbcDatabaseTester();
			snapshotMgr = new SnapshotMgr();
			databaseTester = dbUtils.getJdbcDatabaseTester();			
		} catch (Exception e){
			e.printStackTrace();
		}
	}
	
	@BeforeClass
	public void setUpClass() throws Exception {

	}

	@AfterClass
	public void tearDownClass() {
		try {
			databaseTester.getConnection().close();
			databaseTester = null;
		} catch (Exception e) {
			logger.error(className + ".tearDownClass() -", e);
		}
	}

	@Before
	public void setUp() throws Exception {
		try {

			CaptureScopeDto captureScopeDto = snapshotMgr.getCaptureScopeDtoFromScopeFileName("csaInsLafisScope_CK_4504146_NEW_Before.scope");
			snapshotMgr.restoreXmlFiles(captureScopeDto);
			
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	}

	@After
	public void tearDown() throws Exception {
		// restore the original data snapshot from full data snapshot
	
//		CaptureScopeDto captureScopeDto = snapshotMgr.getCaptureScopeDtoFromScopeFileName("csaInsLafisScope_CK_4513198_Before.scope");
//		snapshotMgr.restoreXmlFiles(captureScopeDto);
//		databaseTester.onTearDown();


	}

	private boolean runPInsLafis(Session sess) throws Exception{
		boolean isDone = false;
		CssaDataStubMgr cssaDataStubMgr = new CssaDataStubMgr();
		TuaUserInfo tuaUserInfo = null;
		List<TuaUserPost> tuaUserPostList = null;
		Connection conn = null;
		try{
			conn = dbUtils.getConnection();
			conn.setSchema(dbProperties.getSchema());
			UserInfo userInfo = cssaDataStubMgr.getUserInfo(loginId, procUnit);
			userInfo.setConnection(conn);
			ThreadLocalUtils.setUserInfo(userInfo);

//			conn.setCatalog(dbProperties.getSchema());
			userInfo.setConnection(dbUtils.getConnection());
			
			CSA_InsLafis csaInsLafis = new CSA_InsLafis();
			int[] retArr = csaInsLafis.PInsLafis(sess, userInfo, caseKey, procUnit, grtType, handleNoti, 
					assPerdStrCalendar.getTime(), assPendEndCalendar.getTime(), 
					paymentExpireCalendar.getTime(), payDay, urgChgBa, opCode, userInfo.getPriPost().getPuName(), creTs, sValRet);
	
			isDone = true;
		} catch (Exception e){

			logger.error(className + ".runCheckIfDhpAddressModified() -", e);
			throw e;
		} finally{
			if (conn != null){
				if (!conn.isClosed()){
					conn.close();
				}
				conn = null;
			}
		}
		return isDone;
	}
	

	
	@Test
	public void testAllRelatedTables() throws Exception{
		IDataSet expectedDataSet = null;
		ITable expectedTable = null;
		ITable actualTable = null;
		try {			
			SessionFactory sf = HibernateUtil.getSessionFactory();
			sf.openSession();
			Session sess = HibernateUtil.getCurrentSession();
			Transaction tran = sess.getTransaction();
			tran.begin();
			
			
			
			boolean isDone = runPInsLafis(sess);
			if (!isDone){
				throw new Exception ("runPInsLafis() - isDone=false");
			}
			
			
			
			CaptureScopeDto captureScopeDto = snapshotMgr.getCaptureScopeDtoFromScopeFileName("csaInsLafisScope_CK_4504146_NEW_Before.scope");
			tran.commit();
			helper.assertActualTableDataSetWithXmlDataSet(captureScopeDto);
			
		}
//		catch (AssertionError ae){
//			ae.printStackTrace();
//		}
		catch (Exception e) {
			logger.error(className + ".testAllRelatedTables() -", e);
			Assert.assertTrue(false);
			throw e;
		} finally {
			if (expectedDataSet != null){
				expectedDataSet = null;
			}
			if (expectedTable != null){
				expectedTable = null;
			}
			if (actualTable != null){
				actualTable = null;
			}
		}
	}
	


}
